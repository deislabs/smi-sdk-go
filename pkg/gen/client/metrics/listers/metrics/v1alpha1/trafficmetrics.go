/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/deislabs/smi-sdk-go/pkg/apis/metrics/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficMetricsLister helps list TrafficMetricses.
type TrafficMetricsLister interface {
	// List lists all TrafficMetricses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficMetrics, err error)
	// TrafficMetricses returns an object that can list and get TrafficMetricses.
	TrafficMetricses(namespace string) TrafficMetricsNamespaceLister
	TrafficMetricsListerExpansion
}

// trafficMetricsLister implements the TrafficMetricsLister interface.
type trafficMetricsLister struct {
	indexer cache.Indexer
}

// NewTrafficMetricsLister returns a new TrafficMetricsLister.
func NewTrafficMetricsLister(indexer cache.Indexer) TrafficMetricsLister {
	return &trafficMetricsLister{indexer: indexer}
}

// List lists all TrafficMetricses in the indexer.
func (s *trafficMetricsLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficMetrics, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficMetrics))
	})
	return ret, err
}

// TrafficMetricses returns an object that can list and get TrafficMetricses.
func (s *trafficMetricsLister) TrafficMetricses(namespace string) TrafficMetricsNamespaceLister {
	return trafficMetricsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficMetricsNamespaceLister helps list and get TrafficMetricses.
type TrafficMetricsNamespaceLister interface {
	// List lists all TrafficMetricses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficMetrics, err error)
	// Get retrieves the TrafficMetrics from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TrafficMetrics, error)
	TrafficMetricsNamespaceListerExpansion
}

// trafficMetricsNamespaceLister implements the TrafficMetricsNamespaceLister
// interface.
type trafficMetricsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficMetricses in the indexer for a given namespace.
func (s trafficMetricsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficMetrics, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficMetrics))
	})
	return ret, err
}

// Get retrieves the TrafficMetrics from the indexer for a given namespace and name.
func (s trafficMetricsNamespaceLister) Get(name string) (*v1alpha1.TrafficMetrics, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trafficmetrics"), name)
	}
	return obj.(*v1alpha1.TrafficMetrics), nil
}
